using Lombiq.Tests.UI.Extensions;
using Lombiq.Tests.UI.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.DependencyInjection;
using OrchardCore.Admin;
using System;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Threading.Tasks;

namespace Lombiq.HelpfulLibraries.OrchardCore.Mvc;

public static class TypedRouteUITestContextExtensions
{
    /// <summary>
    /// Navigates to the relative URL generated by <see cref="TypedRoute"/> for the <paramref name="actionExpression"/>
    /// in the <typeparamref name="TController"/>.
    /// </summary>
    public static Task GoToAsync<TController>(
        this UITestContext context,
        Expression<Action<TController>> actionExpression,
        params (string Key, object Value)[] additionalArguments)
        where TController : ControllerBase =>
        context.GoToRelativeUrlAsync(context.GetRelativeUrlOfAction(actionExpression, additionalArguments));

    /// <summary>
    /// Navigates to the relative URL generated by <see cref="TypedRoute"/> for the <paramref
    /// name="actionExpressionAsync"/> in the <typeparamref name="TController"/>.
    /// </summary>
    public static Task GoToAsync<TController>(
        this UITestContext context,
        Expression<Func<TController, Task>> actionExpressionAsync,
        params (string Key, object Value)[] additionalArguments)
        where TController : ControllerBase =>
        context.GoToRelativeUrlAsync(context.GetRelativeUrlOfAction(actionExpressionAsync, additionalArguments));

    /// <summary>
    /// Gets the relative URL generated by <see cref="TypedRoute"/> for the <paramref name="actionExpression"/> in the
    /// <typeparamref name="TController"/>.
    /// </summary>
    [SuppressMessage("Design", "CA1055:URI-like return values should not be strings", Justification = "Other APIs need it as a string.")]
    public static string GetRelativeUrlOfAction<TController>(
        this UITestContext context,
        Expression<Action<TController>> actionExpression,
        params (string Key, object Value)[] additionalArguments)
        where TController : ControllerBase
    {
        // We can't dispose the scope here because it would lead to exceptions in the consumers.
#pragma warning disable CA2000 // Dispose objects before losing scope
        var serviceProvider = CreateServiceProvider(context);
#pragma warning restore CA2000 // Dispose objects before losing scope
        var route = TypedRoute
            .CreateFromExpression(actionExpression, additionalArguments, serviceProvider)
            .ToString();

        return route;
    }

    /// <summary>
    /// Gets the relative URL generated by <see cref="TypedRoute"/> for the <paramref name="actionExpressionAsync"/> in
    /// the <typeparamref name="TController"/>.
    /// </summary>
    [SuppressMessage("Design", "CA1055:URI-like return values should not be strings", Justification = "Other APIs need it as a string.")]
    public static string GetRelativeUrlOfAction<TController>(
        this UITestContext context,
        Expression<Func<TController, Task>> actionExpressionAsync,
        params (string Key, object Value)[] additionalArguments)
        where TController : ControllerBase
    {
        // We can't dispose the scope here because it would lead to exceptions in the consumers.
#pragma warning disable CA2000 // Dispose objects before losing scope
        var serviceProvider = CreateServiceProvider(context);
#pragma warning restore CA2000 // Dispose objects before losing scope

        var route = TypedRoute
            .CreateFromExpression(actionExpressionAsync.StripResult(), additionalArguments, serviceProvider)
            .ToString();

        return route;
    }

    /// <summary>
    /// Gets the absolute URL generated by <see cref="TypedRoute"/> for the <paramref name="actionExpression"/> in the
    /// <typeparamref name="TController"/>.
    /// </summary>
    public static Uri GetAbsoluteUrlOfAction<TController>(
        this UITestContext context,
        Expression<Action<TController>> actionExpression,
        params (string Key, object Value)[] additionalArguments)
        where TController : ControllerBase =>
        context.GetAbsoluteUri(context.GetRelativeUrlOfAction(actionExpression, additionalArguments));

    /// <summary>
    /// Gets the absolute URL generated by <see cref="TypedRoute"/> for the <paramref name="actionExpressionAsync"/> in
    /// the <typeparamref name="TController"/>.
    /// </summary>
    public static Uri GetAbsoluteUrlOfAction<TController>(
        this UITestContext context,
        Expression<Func<TController, Task>> actionExpressionAsync,
        params (string Key, object Value)[] additionalArguments)
        where TController : ControllerBase =>
        context.GetAbsoluteUri(context.GetRelativeUrlOfAction(actionExpressionAsync, additionalArguments));

    private static ServiceProvider CreateServiceProvider(UITestContext context)
    {
        var services = new ServiceCollection();

        // The AdminOptions.AdminUrlPrefix setter automatically trims out leading or trailing slashes so the format
        // difference between the two properties doesn't matter.
        services.Configure<AdminOptions>(options => options.AdminUrlPrefix = context.AdminUrlPrefix);

        return services.BuildServiceProvider();
    }
}
