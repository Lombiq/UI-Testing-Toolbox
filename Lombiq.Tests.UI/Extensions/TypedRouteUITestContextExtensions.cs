using Lombiq.Tests.UI.Extensions;
using Lombiq.Tests.UI.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.DependencyInjection;
using OrchardCore.Admin;
using System;
using System.Linq.Expressions;
using System.Threading.Tasks;

namespace Lombiq.HelpfulLibraries.OrchardCore.Mvc;

public static class TypedRouteUITestContextExtensions
{
    /// <summary>
    /// Navigates to the relative URL generated by <see cref="TypedRoute"/> for the <paramref name="actionExpression"/>
    /// in the <typeparamref name="TController"/>.
    /// </summary>
    public static Task GoToAsync<TController>(
        this UITestContext context,
        Expression<Action<TController>> actionExpression,
        params (string Key, object Value)[] additionalArguments)
        where TController : ControllerBase =>
        context.GoToRelativeUrlAsync(TypedRoute
            .CreateFromExpression(actionExpression, additionalArguments, CreateServiceProvider(context))
            .ToString());

    /// <summary>
    /// Navigates to the relative URL generated by <see cref="TypedRoute"/> for the <paramref
    /// name="actionExpressionAsync"/> in the <typeparamref name="TController"/>.
    /// </summary>
    public static Task GoToAsync<TController>(
        this UITestContext context,
        Expression<Func<TController, Task>> actionExpressionAsync,
        params (string Key, object Value)[] additionalArguments)
        where TController : ControllerBase =>
        context.GoToRelativeUrlAsync(TypedRoute
            .CreateFromExpression(actionExpressionAsync.StripResult(), additionalArguments, CreateServiceProvider(context))
            .ToString());

    private static IServiceProvider CreateServiceProvider(UITestContext context)
    {
        var services = new ServiceCollection();

        // The AdminOptions.AdminUrlPrefix setter automatically trims out leading or trailing slashes so the format
        // difference between the two properties doesn't matter.
        services.Configure<AdminOptions>(options => options.AdminUrlPrefix = context.AdminUrlPrefix);

        return services.BuildServiceProvider();
    }
}
